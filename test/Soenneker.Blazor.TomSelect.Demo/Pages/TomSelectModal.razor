@using Microsoft.Extensions.Logging
@using Soenneker.Blazor.TomSelect.Demo.Enums
@using Soenneker.Blazor.TomSelect.Base
@inject ILogger<TomSelectModal> Logger

<Modal @ref="_modalRef" >
    <ModalContent Centered="true" >
        <ModalHeader>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel>State</FieldLabel>
                <TomSelect @ref="_tomSelectRef" TItem="StateType"
                           TType="string"
                           Data="_states"
                           TextField="@(c => c.Name)"
                           ValueField="@(c => c.Value.ToString())"
                           Items="@_selectedStates"
                           Multiple="true" >
                </TomSelect>
            </Field>
            <Field>
                <FieldLabel>Start time</FieldLabel>
                <TimePicker @bind-Time="_timeSpan" TValue="TimeSpan?" DisplayFormat="h:i K" />
            </Field>
            @if (_existingModel)
            {
                <Button Clicked="Clicked" >Close</Button>
            }
            <Button Clicked="StateChange">StateChange</Button>
        </ModalBody>
    </ModalContent>
</Modal>

@code {
    private List<StateType>? _states;
    private List<StateType> _selectedStates = [];

    private Modal? _modalRef;
    private BaseTomSelect? _tomSelectRef;

    TimeSpan? _timeSpan;

    private bool _existingModel;

    protected override void OnInitialized()
    {
        _states = StateType.List().ToList();
    }

    public async Task Show()
    {
        _selectedStates = [];

        _existingModel = false;

        await _modalRef!.Show();
    }

    public async Task Clicked()
    {
        Logger.LogInformation("Selected States: {0}", _selectedStates);

        await _modalRef!.Close(CloseReason.UserClosing);

        StateHasChanged();
    }

    public void StateChange()
    {
        
        StateHasChanged();
    }

}