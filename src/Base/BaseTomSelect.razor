@using System.Threading
@using Microsoft.Extensions.Logging
@using Soenneker.Blazor.TomSelect.Abstract
@using Soenneker.Blazor.TomSelect.Dtos
@using Soenneker.Blazor.Utils.InteropEventListener.Abstract
@using Soenneker.Extensions.ValueTask

@* ReSharper disable InconsistentNaming *@
@inject ITomSelectInterop _tomSelectInterop
@inject IInteropEventListener _interopEventListener
@inject ILogger<BaseTomSelect> _logger
@* ReSharper restore InconsistentNaming *@

@code {

    #region Events

    [Parameter]
    public EventCallback OnInitialize { get; set; }

    [Parameter]
    public EventCallback<List<string>> OnChange { get; set; }

    [Parameter]
    public EventCallback OnFocus { get; set; }

    [Parameter]
    public EventCallback OnBlur { get; set; }

    [Parameter]
    public EventCallback<(string Value, TomSelectOption Item)> OnItemAdd { get; set; }

    [Parameter]
    public EventCallback<(string Value, TomSelectOption Item)> OnItemCreated { get; set; }

    [Parameter]
    public EventCallback<(string Value, TomSelectOption Item)> OnItemRemove { get; set; }

    [Parameter]
    public EventCallback<TomSelectOption> OnItemSelect { get; set; }

    [Parameter]
    public EventCallback OnClearItems { get; set; }

    [Parameter]
    public EventCallback<(string Value, TomSelectOption Data)> OnOptionAdd { get; set; }

    [Parameter]
    public EventCallback<string> OnOptionRemove { get; set; }

    [Parameter]
    public EventCallback OnOptionClear { get; set; }

    [Parameter]
    public EventCallback<(string Id, TomSelectOption Data)> OnOptgroupAdd { get; set; }

    [Parameter]
    public EventCallback<string> OnOptgroupRemove { get; set; }

    [Parameter]
    public EventCallback OnOptgroupClear { get; set; }

    [Parameter]
    public EventCallback<TomSelectOption> OnDropdownOpen { get; set; }

    [Parameter]
    public EventCallback<TomSelectOption> OnDropdownClose { get; set; }

    [Parameter]
    public EventCallback<string> OnType { get; set; }

    [Parameter]
    public EventCallback<object> OnLoad { get; set; }

    [Parameter]
    public EventCallback OnDestroy { get; set; }

    [Parameter]
    public bool Debug { get; set; }

    [Parameter]
    public string? Placeholder { get; set; }

    #endregion Events

    protected override void OnInitialized()
    {
        InteropEventListener = _interopEventListener;
        TomSelectInterop = _tomSelectInterop;
        Logger = _logger;

        base.OnInitialized();
    }

    public virtual ValueTask Reinitialize(CancellationToken cancellationToken = default)
    {
        return ValueTask.CompletedTask;
    }

    public async ValueTask RemoveOption(string value, CancellationToken cancellationToken = default)
    {
        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, CTs.Token);
        await TomSelectInterop.RemoveOption(ElementId, value, linkedCts.Token).NoSync();
    }

    public async ValueTask RefreshOptions(bool triggerDropdown = false, CancellationToken cancellationToken = default)
    {
        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, CTs.Token);
        await TomSelectInterop.RefreshOptions(ElementId, triggerDropdown, linkedCts.Token).NoSync();
    }

    public async ValueTask ClearOptions(CancellationToken cancellationToken = default)
    {
        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, CTs.Token);
        await TomSelectInterop.ClearOptions(ElementId, linkedCts.Token).NoSync();
    }

    public async ValueTask RemoveItem(string valueOrHtmlElement, bool silent = false, CancellationToken cancellationToken = default)
    {
        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, CTs.Token);
        await TomSelectInterop.RemoveItem(ElementId, valueOrHtmlElement, silent, linkedCts.Token).NoSync();
    }

    public async ValueTask AddOptionGroup(string id, object data, CancellationToken cancellationToken = default)
    {
        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, CTs.Token);
        await TomSelectInterop.AddOptionGroup(ElementId, id, data, linkedCts.Token).NoSync();
    }

    public async ValueTask RemoveOptionGroup(string id, CancellationToken cancellationToken = default)
    {
        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, CTs.Token);
        await TomSelectInterop.RemoveOptionGroup(ElementId, id, linkedCts.Token).NoSync();
    }

    public async ValueTask ClearOptionGroups(CancellationToken cancellationToken = default)
    {
        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, CTs.Token);
        await TomSelectInterop.ClearOptionGroups(ElementId, linkedCts.Token).NoSync();
    }

    public async ValueTask OpenDropdown(CancellationToken cancellationToken = default)
    {
        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, CTs.Token);
        await TomSelectInterop.OpenDropdown(ElementId, linkedCts.Token).NoSync();
    }

    public async ValueTask CloseDropdown(CancellationToken cancellationToken = default)
    {
        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, CTs.Token);
        await TomSelectInterop.CloseDropdown(ElementId, linkedCts.Token).NoSync();
    }

    public async ValueTask PositionDropdown(CancellationToken cancellationToken = default)
    {
        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, CTs.Token);
        await TomSelectInterop.PositionDropdown(ElementId, linkedCts.Token).NoSync();
    }

    public async ValueTask Focus(CancellationToken cancellationToken = default)
    {
        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, CTs.Token);
        await TomSelectInterop.Focus(ElementId, linkedCts.Token).NoSync();
    }

    public async ValueTask Blur(CancellationToken cancellationToken = default)
    {
        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, CTs.Token);
        await TomSelectInterop.Blur(ElementId, linkedCts.Token).NoSync();
    }

    public async ValueTask Lock(CancellationToken cancellationToken = default)
    {
        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, CTs.Token);
        await TomSelectInterop.Lock(ElementId, linkedCts.Token).NoSync();
    }

    public async ValueTask Unlock(CancellationToken cancellationToken = default)
    {
        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, CTs.Token);
        await TomSelectInterop.Unlock(ElementId, linkedCts.Token).NoSync();
    }

    public async ValueTask Enable(CancellationToken cancellationToken = default)
    {
        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, CTs.Token);
        await TomSelectInterop.Enable(ElementId, linkedCts.Token).NoSync();
    }

    public async ValueTask Disable(CancellationToken cancellationToken = default)
    {
        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, CTs.Token);
        await TomSelectInterop.Disable(ElementId, linkedCts.Token).NoSync();
    }

    public async ValueTask SetValue(TomSelectOption value, bool silent = false, CancellationToken cancellationToken = default)
    {
        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, CTs.Token);
        await TomSelectInterop.SetValue(ElementId, value, silent, linkedCts.Token).NoSync();
    }

    public async ValueTask<TomSelectOption> GetValue(CancellationToken cancellationToken = default)
    {
        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, CTs.Token);
        return await TomSelectInterop.GetValue(ElementId, linkedCts.Token).NoSync();
    }

    public async ValueTask SetCaret(int index, CancellationToken cancellationToken = default)
    {
        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, CTs.Token);
        await TomSelectInterop.SetCaret(ElementId, index, linkedCts.Token).NoSync();
    }

    public async ValueTask<bool> IsFull(CancellationToken cancellationToken = default)
    {
        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, CTs.Token);
        return await TomSelectInterop.IsFull(ElementId, linkedCts.Token).NoSync();
    }

    public async ValueTask ClearCache(CancellationToken cancellationToken = default)
    {
        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, CTs.Token);
        await TomSelectInterop.ClearCache(ElementId, linkedCts.Token).NoSync();
    }

    public async ValueTask SetTextboxValue(string str, CancellationToken cancellationToken = default)
    {
        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, CTs.Token);
        await TomSelectInterop.SetTextboxValue(ElementId, str, linkedCts.Token).NoSync();
    }

    public async ValueTask Sync(CancellationToken cancellationToken = default)
    {
        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, CTs.Token);
        await TomSelectInterop.Sync(ElementId, linkedCts.Token).NoSync();
    }

    public async ValueTask Destroy(CancellationToken cancellationToken = default)
    {
        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, CTs.Token);
        await TomSelectInterop.Destroy(ElementId, linkedCts.Token).NoSync();
    }

}