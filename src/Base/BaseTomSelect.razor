@using System.Threading
@using Microsoft.Extensions.Logging
@using Soenneker.Blazor.TomSelect.Abstract
@using Soenneker.Blazor.TomSelect.Dtos
@using Soenneker.Blazor.Utils.InteropEventListener.Abstract
@using Soenneker.Extensions.ValueTask
@using Soenneker.Extensions.CancellationTokens
@using Microsoft.JSInterop
@using Soenneker.Blazor.TomSelect.Base.Abstract
@using Soenneker.Quark.Components.Cancellable

@* ReSharper disable InconsistentNaming *@
@inject ITomSelectInterop _tomSelectInterop
@inject IInteropEventListener _interopEventListener
@inject ILogger<BaseTomSelect> _logger
@* ReSharper restore InconsistentNaming *@

@inherits Soenneker.Quark.Components.Cancellable.CancellableComponent

@code {

    #region Events

    [Parameter]
    public EventCallback OnInitialize { get; set; }

    [Parameter]
    public EventCallback<List<string>> OnChange { get; set; }

    [Parameter]
    public EventCallback OnFocus { get; set; }

    [Parameter]
    public EventCallback OnBlur { get; set; }

    [Parameter]
    public EventCallback<(string Value, TomSelectOption Item)> OnItemAdd { get; set; }

    [Parameter]
    public EventCallback<(string Value, TomSelectOption Item)> OnItemCreated { get; set; }

    [Parameter]
    public EventCallback<(string Value, TomSelectOption Item)> OnItemRemove { get; set; }

    [Parameter]
    public EventCallback<TomSelectOption> OnItemSelect { get; set; }

    [Parameter]
    public EventCallback OnClearItems { get; set; }

    [Parameter]
    public EventCallback<(string Value, TomSelectOption Data)> OnOptionAdd { get; set; }

    [Parameter]
    public EventCallback<string> OnOptionRemove { get; set; }

    [Parameter]
    public EventCallback OnOptionClear { get; set; }

    [Parameter]
    public EventCallback<(string Id, TomSelectOption Data)> OnOptgroupAdd { get; set; }

    [Parameter]
    public EventCallback<string> OnOptgroupRemove { get; set; }

    [Parameter]
    public EventCallback OnOptgroupClear { get; set; }

    [Parameter]
    public EventCallback<TomSelectOption> OnDropdownOpen { get; set; }

    [Parameter]
    public EventCallback<TomSelectOption> OnDropdownClose { get; set; }

    [Parameter]
    public EventCallback<string> OnType { get; set; }

    [Parameter]
    public EventCallback<object> OnLoad { get; set; }

    [Parameter]
    public EventCallback OnDestroy { get; set; }

    [Parameter]
    public bool Debug { get; set; }

    [Parameter]
    public string? Placeholder { get; set; }

    #endregion Events

    #region Protected Fields

    protected DotNetObjectReference<BaseTomSelect>? DotNetReference;

    protected ITomSelectInterop TomSelectInterop = null!;

    protected IInteropEventListener InteropEventListener = null!;

    /// <summary>
    /// The actual HTML element's id
    /// </summary>
    protected readonly string ElementId = $"tomselect-{Guid.NewGuid().ToString()}";

    protected ElementReference ElementReference;

    protected ILogger<BaseTomSelect> Logger = null!;

    #endregion Protected Fields

    protected override void OnInitialized()
    {
        InteropEventListener = _interopEventListener;
        TomSelectInterop = _tomSelectInterop;
        Logger = _logger;

        base.OnInitialized();
    }

    public override async ValueTask DisposeAsync()
    {
        await base.DisposeAsync();

        if (DotNetReference != null)
        {
            DotNetReference.Dispose();
            DotNetReference = null;
        }
        InteropEventListener.DisposeForElement(ElementId);
    }

    protected void LogWarning(string message)
    {
        if (Debug)
            Console.WriteLine(message);
    }

    protected void LogDebug(string message)
    {
        if (Debug)
            Console.WriteLine(message);
    }

    public virtual ValueTask Reinitialize(CancellationToken cancellationToken = default)
    {
        return ValueTask.CompletedTask;
    }

    public async ValueTask RemoveOption(string value, CancellationToken cancellationToken = default)
    {
        CancellationToken linked = CancellationToken.Link(cancellationToken, out CancellationTokenSource? cts);

        using (cts)
            await TomSelectInterop.RemoveOption(ElementId, value, linked);
    }

    public async ValueTask RefreshOptions(bool triggerDropdown = false, CancellationToken cancellationToken = default)
    {
        CancellationToken linked = CancellationToken.Link(cancellationToken, out CancellationTokenSource? cts);

        using (cts)
            await TomSelectInterop.RefreshOptions(ElementId, triggerDropdown, linked);
    }

    public async ValueTask ClearOptions(CancellationToken cancellationToken = default)
    {
        CancellationToken linked = CancellationToken.Link(cancellationToken, out CancellationTokenSource? cts);

        using (cts)
            await TomSelectInterop.ClearOptions(ElementId, linked);
    }

    public async ValueTask RemoveItem(string valueOrHtmlElement, bool silent = false, CancellationToken cancellationToken = default)
    {
        CancellationToken linked = CancellationToken.Link(cancellationToken, out CancellationTokenSource? cts);

        using (cts)
            await TomSelectInterop.RemoveItem(ElementId, valueOrHtmlElement, silent, linked);
    }

    public async ValueTask AddOptionGroup(string id, object data, CancellationToken cancellationToken = default)
    {
        CancellationToken linked = CancellationToken.Link(cancellationToken, out CancellationTokenSource? cts);

        using (cts)
            await TomSelectInterop.AddOptionGroup(ElementId, id, data, linked);
    }

    public async ValueTask RemoveOptionGroup(string id, CancellationToken cancellationToken = default)
    {
        CancellationToken linked = CancellationToken.Link(cancellationToken, out CancellationTokenSource? cts);

        using (cts)
            await TomSelectInterop.RemoveOptionGroup(ElementId, id, linked);
    }

    public async ValueTask ClearOptionGroups(CancellationToken cancellationToken = default)
    {
        CancellationToken linked = CancellationToken.Link(cancellationToken, out CancellationTokenSource? cts);

        using (cts)
            await TomSelectInterop.ClearOptionGroups(ElementId, linked);
    }

    public async ValueTask OpenDropdown(CancellationToken cancellationToken = default)
    {
        CancellationToken linked = CancellationToken.Link(cancellationToken, out CancellationTokenSource? cts);

        using (cts)
            await TomSelectInterop.OpenDropdown(ElementId, linked);
    }

    public async ValueTask CloseDropdown(CancellationToken cancellationToken = default)
    {
        CancellationToken linked = CancellationToken.Link(cancellationToken, out CancellationTokenSource? cts);

        using (cts)
            await TomSelectInterop.CloseDropdown(ElementId, linked);
    }

    public async ValueTask PositionDropdown(CancellationToken cancellationToken = default)
    {
        CancellationToken linked = CancellationToken.Link(cancellationToken, out CancellationTokenSource? cts);

        using (cts)
            await TomSelectInterop.PositionDropdown(ElementId, linked);
    }

    public async ValueTask Focus(CancellationToken cancellationToken = default)
    {
        CancellationToken linked = CancellationToken.Link(cancellationToken, out CancellationTokenSource? cts);

        using (cts)
            await TomSelectInterop.Focus(ElementId, linked);
    }

    public async ValueTask Blur(CancellationToken cancellationToken = default)
    {
        CancellationToken linked = CancellationToken.Link(cancellationToken, out CancellationTokenSource? cts);

        using (cts)
            await TomSelectInterop.Blur(ElementId, linked);
    }

    public async ValueTask Lock(CancellationToken cancellationToken = default)
    {
        CancellationToken linked = CancellationToken.Link(cancellationToken, out CancellationTokenSource? cts);

        using (cts)
            await TomSelectInterop.Lock(ElementId, linked);
    }

    public async ValueTask Unlock(CancellationToken cancellationToken = default)
    {
        CancellationToken linked = CancellationToken.Link(cancellationToken, out CancellationTokenSource? cts);

        using (cts)
            await TomSelectInterop.Unlock(ElementId, linked);
    }

    public async ValueTask Enable(CancellationToken cancellationToken = default)
    {
        CancellationToken linked = CancellationToken.Link(cancellationToken, out CancellationTokenSource? cts);

        using (cts)
            await TomSelectInterop.Enable(ElementId, linked);
    }

    public async ValueTask Disable(CancellationToken cancellationToken = default)
    {
        CancellationToken linked = CancellationToken.Link(cancellationToken, out CancellationTokenSource? cts);

        using (cts)
            await TomSelectInterop.Disable(ElementId, linked);
    }

    public async ValueTask SetValue(TomSelectOption value, bool silent = false, CancellationToken cancellationToken = default)
    {
        CancellationToken linked = CancellationToken.Link(cancellationToken, out CancellationTokenSource? cts);

        using (cts)
            await TomSelectInterop.SetValue(ElementId, value, silent, linked);
    }

    public async ValueTask<TomSelectOption> GetValue(CancellationToken cancellationToken = default)
    {
        CancellationToken linked = CancellationToken.Link(cancellationToken, out CancellationTokenSource? cts);

        using (cts)
            return await TomSelectInterop.GetValue(ElementId, linked);
    }

    public async ValueTask SetCaret(int index, CancellationToken cancellationToken = default)
    {
        CancellationToken linked = CancellationToken.Link(cancellationToken, out CancellationTokenSource? cts);

        using (cts)
            await TomSelectInterop.SetCaret(ElementId, index, linked);
    }

    public async ValueTask<bool> IsFull(CancellationToken cancellationToken = default)
    {
        CancellationToken linked = CancellationToken.Link(cancellationToken, out CancellationTokenSource? cts);

        using (cts)
            return await TomSelectInterop.IsFull(ElementId, linked);
    }

    public async ValueTask ClearCache(CancellationToken cancellationToken = default)
    {
        CancellationToken linked = CancellationToken.Link(cancellationToken, out CancellationTokenSource? cts);

        using (cts)
            await TomSelectInterop.ClearCache(ElementId, linked);
    }

    public async ValueTask SetTextboxValue(string str, CancellationToken cancellationToken = default)
    {
        CancellationToken linked = CancellationToken.Link(cancellationToken, out CancellationTokenSource? cts);

        using (cts)
            await TomSelectInterop.SetTextboxValue(ElementId, str, linked);
    }

    public async ValueTask Sync(CancellationToken cancellationToken = default)
    {
        CancellationToken linked = CancellationToken.Link(cancellationToken, out CancellationTokenSource? cts);

        using (cts)
            await TomSelectInterop.Sync(ElementId, linked);
    }

    public async ValueTask Destroy(CancellationToken cancellationToken = default)
    {
        CancellationToken linked = CancellationToken.Link(cancellationToken, out CancellationTokenSource? cts);

        using (cts)
            await TomSelectInterop.Destroy(ElementId, linked);
    }

}
