@page "/"
@using Microsoft.Extensions.Logging
@using Soenneker.Blazor.TomSelect.Configuration
@using Soenneker.Blazor.TomSelect.Demo.Dtos
@using Soenneker.Blazor.TomSelect.Dtos
@using Soenneker.Blazor.TomSelect.Enums
@using Soenneker.Blazor.Utils.Navigation.Abstract
@using Soenneker.Extensions.Enumerable
@using Soenneker.Utils.AutoBogus

@inherits Soenneker.Quark.Components.Cancellable.CancellableComponent 

@inject ILogger<Index> Logger
@inject HttpClient Http
@inject INavigationUtil NavigationUtil

<img src="https://user-images.githubusercontent.com/4441470/224455560-91ed3ee7-f510-4041-a8d2-3fc093025112.png" />
<h1>Soenneker.Blazor.TomSelect demo</h1>
<p>This page demonstrates some of the uses of the TomSelect component.</p>

@if (_render)
{
    @if (_countries.Populated())
    {
        <TomSelect
            TItem="Country"
            TType="string"
            OnInitialize="OnTomSelectInitialized"
            OnOptionRemove="OnOptionRemove"
            OnItemRemove="OnItemRemove"
            OnOptionAdd="OnOptionAdd"
            OnItemCreated="OnItemCreated"
            OnItemAdd="OnItemAdd"
            Data="@_countries"
            TextField="item => item.Name"
            ValueField="item => item.Id.ToString()"
            CreateFuncSync="text => new Country {Name = text, Id = Guid.NewGuid().ToString()}"
            @ref="_tomSelect"
            @bind-Items="_selectedItems"
            Multiple="true"
            Create="true"
            OnChange="OnChange"
            Debug=true
            PlaceHolder="Choose a country"
            Configuration="_configuration" >
        </TomSelect>
    }
}
<br />

<button @onclick="AddOption" >AddOption</button>
<button @onclick="AddExistingItem" >AddExistingItem</button>
<button @onclick="GetItems" >GetItems</button>
<button @onclick="Render" >Render</button>
<button @onclick="ClearViaData" >ClearViaData</button>
<button @onclick="AddViaData" >AddViaData</button>
<button @onclick="async () => await ClearItems()" >ClearItems</button>
<button @onclick="ClearOptions" >ClearOptions</button>
<button @onclick="Reinitialize" >Reinitialize</button>
<button @onclick="SetOptionsAndItems" >SetOptionsAndItems</button>

<button @onclick="OpenModal" >Open Modal</button>
<NavLink href="/second" >Go to second page</NavLink>
<Button Clicked="GoToSecond">Go to second page</Button>
<hr />

<TomSelectModal @ref="_tomSelectModal" ></TomSelectModal>

@code{
    private List<Country>? _countries;

    private AutoFaker _autoFaker = null!;

    // private List<TomSelectOption>? _options;
    private List<Country> _selectedItems = [];

    private TomSelect<Country, string> _tomSelect = null!;

    private bool _render = true;

    private TomSelectModal? _tomSelectModal;

    private readonly TomSelectConfiguration _configuration = new()
    {
        Plugins = [TomSelectPluginType.DragDrop],
        UseCdn = true,
        Debug = true
    };

    protected override void OnInitialized()
    {
        _autoFaker = new AutoFaker();
    }

    protected override async Task OnInitializedAsync()
    {
        await SetOptionsAndItems();
    }

    private async Task SetOptionsAndItems()
    {
        _countries = await Http.GetFromJsonAsync<List<Country>>("sample-data/countries.json");
        _selectedItems = _countries!.ToList();
    }

    private async Task OpenModal()
    {
        await _tomSelectModal!.Show();
    }

    private void OnTomSelectInitialized()
    {
        Logger.LogInformation("OnInitialized called");
    }


    private void ClearViaData()
    {
        _selectedItems.Clear();
    }

    private async Task AddViaData()
    {
        var countries = await Http.GetFromJsonAsync<List<Country>>("sample-data/countries.json");
        _selectedItems.Add(countries!.GetRandom());
    }

    private async ValueTask ClearItems()
    {
        await _tomSelect.ClearItems();
    }

    private async Task ClearOptions()
    {
        await _tomSelect.ClearOptions();
    }

    private async Task Reinitialize()
    {
        await _tomSelect.Reinitialize();
    }

    private void Render()
    {
        _render = !_render;
    }

    private void OnOptionAdd((string str, TomSelectOption obj) result)
    {
        Logger.LogInformation("OnOptionAdd called");
    }

    private void OnItemAdd((string str, TomSelectOption obj) result)
    {
        Logger.LogInformation("OnItemAdd called");
    }

    private void OnOptionRemove(string result)
    {
        Logger.LogInformation("OnOptionRemove called");
    }

    private void OnItemRemove((string str, TomSelectOption obj) result)
    {
        Logger.LogInformation("OnItemRemove called");
    }

    private void OnItemCreated((string str, TomSelectOption obj) result)
    {
        Logger.LogInformation("OnItemCreated called");
    }

    private void OnChange()
    {
        Logger.LogInformation("OnChange called");

        foreach (Country item in _selectedItems)
        {
            Logger.LogInformation("Item is currently selected: {item}", item.Name);
        }
    }

    private async Task AddExistingItem()
    {
        await _tomSelect.AddItem(_tomSelect.Data.GetRandom()!.Id);
    }

    private async Task AddOption()
    {
        await _tomSelect.AddOption(_autoFaker.Generate<Country>());
    }

    public async Task GoToSecond()
    {
        await Cancel();
        NavigationUtil.NavigateTo("second");
    }

    private void GetItems()
    {
        if (_tomSelect.Items.Count == 0)
        {
            Logger.LogInformation("No items selected");
            return;
        }

        foreach (Country item in _tomSelect.Items)
        {
            Logger.LogInformation("_tomSelect.Item: {0}", item.Name);
        }

        foreach (Country item in _selectedItems)
        {
            Logger.LogInformation("_selectedItem: {0}", item.Name);
        }
    }

}