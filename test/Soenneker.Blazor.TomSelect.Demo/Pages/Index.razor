@page "/"
@using Microsoft.Extensions.Logging
@using Soenneker.Blazor.TomSelect.Configuration
@using Soenneker.Blazor.TomSelect.Demo.Dtos
@using Soenneker.Blazor.TomSelect.Dtos
@using Soenneker.Blazor.TomSelect.Enums
@using Soenneker.Utils.AutoBogus
@using Soenneker.Extensions.Enumerable

@inherits Soenneker.Quark.CoreCancellableComponent 

@inject ILogger<Index> Logger
@inject HttpClient Http

<div class="page-header">
    <h1 class="page-title">TomSelect Component Demo</h1>
    <p class="page-subtitle">Explore the powerful features of the TomSelect component with these interactive examples. Select countries, create new options, and see the component in action.</p>
</div>

@if (_render)
{
    <div class="demo-section fade-in">
        <h2>Multi-Select with Create Option</h2>
        <p class="demo-description">This example demonstrates a multi-select TomSelect component with the ability to create new options. You can select multiple countries and even add custom entries.</p>
        
        @if (_countries.Populated())
        {
            <div class="tomselect-container">
                <TomSelect
                    TItem="Country"
                    TType="string"
                    OnInitialize="OnTomSelectInitialized"
                    OnOptionRemove="OnOptionRemove"
                    OnItemRemove="OnItemRemove"
                    OnOptionAdd="OnOptionAdd"
                    OnItemCreated="OnItemCreated"
                    OnItemAdd="OnItemAdd"
                    Data="@_countries"
                    TextField="item => item.Name"
                    ValueField="item => item.Id.ToString()"
                    CreateFuncSync="text => new Country {Name = text, Id = Guid.NewGuid().ToString()}"
                    @ref="_tomSelect"
                    @bind-Items="_selectedItems"
                    Multiple="true"
                    Create="true"
                    OnChange="OnChange"
                    Debug=true
                    PlaceHolder="Choose countries or create new ones..."
                    Configuration="_configuration" >
                </TomSelect>
            </div>
        }
    </div>

    <div class="demo-section">
        <h2>Component Controls</h2>
        <p class="demo-description">Use these buttons to interact with the TomSelect component and see how it responds to different operations.</p>
        
        <div class="btn-group">
            <button class="btn btn-primary" @onclick="AddOption">
                <svg width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z"/>
                </svg>
                Add Option
            </button>
            <button class="btn btn-secondary" @onclick="AddExistingItem">
                <svg width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                    <path d="m8 4.5 2.5 2.5L8 9.5l-.5-.5L9.5 7 7.5 5l.5-.5z"/>
                </svg>
                Add Existing Item
            </button>
            <button class="btn btn-secondary" @onclick="GetItems">
                <svg width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M14.5 3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-13a.5.5 0 0 1-.5-.5v-9a.5.5 0 0 1 .5-.5h13zm-13-1A1.5 1.5 0 0 0 0 3.5v9A1.5 1.5 0 0 0 1.5 14h13a1.5 1.5 0 0 0 1.5-1.5v-9A1.5 1.5 0 0 0 14.5 2h-13z"/>
                    <path d="M7 5.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5zm-1.496-.854a.5.5 0 0 1 0 .708l-1.5 1.5a.5.5 0 0 1-.708 0l-.5-.5a.5.5 0 1 1 .708-.708l.146.147 1.146-1.147a.5.5 0 0 1 .708 0zM7 9.5a.5.5 0 0 1 .5-.5h5a.5.5 0 0 1 0 1h-5a.5.5 0 0 1-.5-.5zm-1.496-.854a.5.5 0 0 1 0 .708l-1.5 1.5a.5.5 0 0 1-.708 0l-.5-.5a.5.5 0 0 1 .708-.708l.146.147 1.146-1.147a.5.5 0 0 1 .708 0z"/>
                </svg>
                Get Items
            </button>
        </div>

        <div class="btn-group">
            <button class="btn btn-secondary" @onclick="Render">
                <svg width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M8 3a5 5 0 1 0 4.546 2.914.5.5 0 0 1 .908-.417A6 6 0 1 1 8 2v1z"/>
                    <path d="M8 4.466V.534a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384L8.41 4.658A.25.25 0 0 1 8 4.466z"/>
                </svg>
                Toggle Render
            </button>
            <button class="btn btn-secondary" @onclick="ClearViaData">
                <svg width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/>
                    <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/>
                </svg>
                Clear Via Data
            </button>
            <button class="btn btn-secondary" @onclick="AddViaData">
                <svg width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                    <path d="m8 4.5 2.5 2.5L8 9.5l-.5-.5L9.5 7 7.5 5l.5-.5z"/>
                </svg>
                Add Via Data
            </button>
        </div>

        <div class="btn-group">
            <button class="btn btn-danger" @onclick="async () => await ClearItems()">
                <svg width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/>
                    <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/>
                </svg>
                Clear Items
            </button>
            <button class="btn btn-danger" @onclick="ClearOptions">
                <svg width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z"/>
                    <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z"/>
                </svg>
                Clear Options
            </button>
            <button class="btn btn-secondary" @onclick="Reinitialize">
                <svg width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M8 3a5 5 0 1 0 4.546 2.914.5.5 0 0 1 .908-.417A6 6 0 1 1 8 2v1z"/>
                    <path d="M8 4.466V.534a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384L8.41 4.658A.25.25 0 0 1 8 4.466z"/>
                </svg>
                Reinitialize
            </button>
            <button class="btn btn-secondary" @onclick="SetOptionsAndItems">
                <svg width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                    <path d="m8 4.5 2.5 2.5L8 9.5l-.5-.5L9.5 7 7.5 5l.5-.5z"/>
                </svg>
                Reset Data
            </button>
        </div>
    </div>

    <div class="demo-section">
        <h2>Modal Example</h2>
        <p class="demo-description">Open a modal dialog to see how TomSelect works within a modal context.</p>
        
        <div class="btn-group">
            <button class="btn btn-primary" @onclick="OpenModal">
                <svg width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                    <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
                    <path d="m8 4.5 2.5 2.5L8 9.5l-.5-.5L9.5 7 7.5 5l.5-.5z"/>
                </svg>
                Open Modal
            </button>
        </div>
    </div>

    <div class="demo-section">
        <h2>Navigation</h2>
        <p class="demo-description">Explore other demo pages to see different TomSelect configurations and use cases.</p>
        
        <div class="btn-group">
            <a href="/second" class="btn btn-secondary">
                <svg width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M1 8a.5.5 0 0 1 .5-.5h11.793l-3.147-3.146a.5.5 0 0 1 .708-.708l4 4a.5.5 0 0 1 0 .708l-4 4a.5.5 0 0 1-.708-.708L13.293 8.5H1.5A.5.5 0 0 1 1 8z"/>
                </svg>
                Go to Advanced Page
            </a>
        </div>
    </div>
}

<TomSelectModal @ref="_tomSelectModal" />

@code{
    private List<Country>? _countries;
    private AutoFaker _autoFaker = null!;
    private List<Country> _selectedItems = [];
    private TomSelect<Country, string> _tomSelect = null!;
    private bool _render = true;
    private TomSelectModal? _tomSelectModal;

    private readonly TomSelectConfiguration _configuration = new()
    {
        Plugins = [TomSelectPluginType.DragDrop],
        UseCdn = true,
        Debug = true
    };

    protected override void OnInitialized()
    {
        _autoFaker = new AutoFaker();
    }

    protected override async Task OnInitializedAsync()
    {
        await SetOptionsAndItems();
    }

    private async Task SetOptionsAndItems()
    {
        _countries = await Http.GetFromJsonAsync<List<Country>>("sample-data/countries.json");
        _selectedItems = _countries!.ToList();
    }

    private async Task OpenModal()
    {
        await _tomSelectModal!.Show();
    }

    private void OnTomSelectInitialized()
    {
        Logger.LogInformation("OnInitialized called");
    }

    private void ClearViaData()
    {
        _selectedItems.Clear();
    }

    private async Task AddViaData()
    {
        var countries = await Http.GetFromJsonAsync<List<Country>>("sample-data/countries.json");
        _selectedItems.Add(countries!.GetRandom());
    }

    private async ValueTask ClearItems()
    {
        await _tomSelect.ClearItems();
    }

    private async Task ClearOptions()
    {
        await _tomSelect.ClearOptions();
    }

    private async Task Reinitialize()
    {
        await _tomSelect.Reinitialize();
    }

    private void Render()
    {
        _render = !_render;
    }

    private void OnOptionAdd((string str, TomSelectOption obj) result)
    {
        Logger.LogInformation("OnOptionAdd called");
    }

    private void OnItemAdd((string str, TomSelectOption obj) result)
    {
        Logger.LogInformation("OnItemAdd called");
    }

    private void OnOptionRemove(string result)
    {
        Logger.LogInformation("OnOptionRemove called");
    }

    private void OnItemRemove((string str, TomSelectOption obj) result)
    {
        Logger.LogInformation("OnItemRemove called");
    }

    private void OnItemCreated((string str, TomSelectOption obj) result)
    {
        Logger.LogInformation("OnItemCreated called");
    }

    private void OnChange()
    {
        Logger.LogInformation("OnChange called");

        foreach (Country item in _selectedItems)
        {
            Logger.LogInformation("Item is currently selected: {item}", item.Name);
        }
    }

    private async Task AddExistingItem()
    {
        await _tomSelect.AddItem(_tomSelect.Data.GetRandom()!.Id);
    }

    private async Task AddOption()
    {
        await _tomSelect.AddOption(_autoFaker.Generate<Country>());
    }

    private void GetItems()
    {
        if (_tomSelect.Items.Count == 0)
        {
            Logger.LogInformation("No items selected");
            return;
        }

        foreach (Country item in _tomSelect.Items)
        {
            Logger.LogInformation("_tomSelect.Item: {0}", item.Name);
        }

        foreach (Country item in _selectedItems)
        {
            Logger.LogInformation("_selectedItem: {0}", item.Name);
        }
    }
}
